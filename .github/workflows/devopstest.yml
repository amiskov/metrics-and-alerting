name: autotests

on:
  pull_request:
  push:
    branches:
      - inc2

jobs:

  devopstest:
    runs-on: ubuntu-latest
    container: golang:1.18

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: praktikum
        options: >-
          --health-cmd pg_isready
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Download autotests binaries
        uses: robinraju/release-downloader@v1.2
        with:
          repository: Yandex-Practicum/go-autotests-bin
          latest: true
          fileName: "*"
          out-file-path: .tools

      - name: Setup autotest binary
        run: |
          chmod -R +x $GITHUB_WORKSPACE/.tools
          mv $GITHUB_WORKSPACE/.tools/devopstest /usr/local/bin/devopstest
          mv $GITHUB_WORKSPACE/.tools/random /usr/local/bin/random

      - name: Build agent binary
        run: |
          cd cmd/agent
          go build -o agent

# Соглашение:
#   Во всех заданиях, нужно обрабатывать все пограничные случаи и негатив-кейсы.
#   По ходу продвижения по инкрементам, тесты становятся строже.
#   Темплейты могут обновляться, добавляя все более строгие проверки.

# I. Задание к первому инкременту.
# Разработать агент по сбору рантайм метрик и их последующей отправке на сервер по протоколу http.
# Разработку необходимо вести с использованием шаблона https://github.com/yandex-praktikum/go-musthave-devops-tpl.git
# Агент должен собирать метрики двух типов:
#   * gauge, тип float64
#   * counter, тип int64
# В качестве источника метрик использовать пакет runtime. Собирать следующие метрики:
#   * Имя метрики: "Alloc", тип: gauge
#   * Имя метрики: "BuckHashSys", тип: gauge
#   * Имя метрики: "Frees", тип: gauge
#   * Имя метрики: "GCCPUFraction", тип: gauge
#   * Имя метрики: "GCSys", тип: gauge
#   * Имя метрики: "HeapAlloc", тип: gauge
#   * Имя метрики: "HeapIdle", тип: gauge
#   * Имя метрики: "HeapInuse", тип: gauge
#   * Имя метрики: "HeapObjects", тип: gauge
#   * Имя метрики: "HeapReleased", тип: gauge
#   * Имя метрики: "HeapSys", тип: gauge
#   * Имя метрики: "LastGC", тип: gauge
#   * Имя метрики: "Lookups", тип: gauge
#   * Имя метрики: "MCacheInuse", тип: gauge
#   * Имя метрики: "MCacheSys", тип: gauge
#   * Имя метрики: "MSpanInuse", тип: gauge
#   * Имя метрики: "MSpanSys", тип: gauge
#   * Имя метрики: "Mallocs", тип: gauge
#   * Имя метрики: "NextGC", тип: gauge
#   * Имя метрики: "NumForcedGC", тип: gauge
#   * Имя метрики: "NumGC", тип: gauge
#   * Имя метрики: "OtherSys", тип: gauge
#   * Имя метрики: "PauseTotalNs", тип: gauge
#   * Имя метрики: "StackInuse", тип: gauge
#   * Имя метрики: "StackSys", тип: gauge
#   * Имя метрики: "Sys", тип: gauge
#   * Имя метрики: "TotalAlloc", тип: gauge
# К метрикам пакета runtime, добавить метрики:
#   * Имя метрики: "PollCount", тип: counter - счетчик, увеличивающийся на 1, при каждом обновлении метрики из пакета runtime (на каждый pollInterval - см. ниже)
#   * Имя метрики: "RandomValue", тип: gauge - обновляемое рандомное значение
# По умолчанию, приложение должно обновлять метрики из пакета runtime с заданной частотой:
#   pollInterval - 2 секунды
# По умолчанию, приложение должно отправлять метрики на сервер с заданной частотой:
#   reportInterval - 10 секунд
# Метрики отправлять по протоколу http, методом POST:
#   * по умолчанию на адрес: 127.0.0.1, порт: 8080
#   * в формате: "http://<АДРЕС_СЕРВЕРА>/update/<ТИП_МЕТРИКИ>/<ИМЯ_МЕТРИКИ>/<ЗНАЧЕНИЕ_МЕТРИКИ>"
#   * application-type: "text/plain"
# Агент должен штатно завершаться по сигналам: syscall.SIGTERM, syscall.SIGINT, syscall.SIGQUIT

      - name: "Code increment #1"
        if: always()
        run: |
          devopstest -test.v -test.run=^TestIteration1$ \
            -agent-binary-path=cmd/agent/agent

      - name: Build server binary
        run: |
          cd cmd/server
          go build -o server

# II. Задание ко второму инкременту.
# Разработать сервер по сбору рантайм метрик, который собирает репорты от агентов по протоколу http.
# Разработку следует продолжать в ранее используемом репозитории (с предыдущими инкрементами), однако сервер стоит размещать по своему пути: cmd/server/
# Сервер должен собирать и хранить произвольные метрики двух типов:
#   * gauge, тип float64, новое значение должно замещать предыдущее.
#   * counter, тип int64, новое значение должно добавляться к предыдущему (если оно ранее уже было известно серверу).
# Метрики принимаются сервером по протоколу http, методом POST:
#   * по умолчанию открывать порт: 8080, на адресе: 127.0.0.1
#   * в формате: "http://<АДРЕС_СЕРВЕРА>/update/<ТИП_МЕТРИКИ>/<ИМЯ_МЕТРИКИ>/<ЗНАЧЕНИЕ_МЕТРИКИ>"
#   * application-type: "text/plain"
#   * при успешном приеме, возвращать статус: http.StatusOK
# Сервер должен штатно завершаться по сигналам: syscall.SIGTERM, syscall.SIGINT, syscall.SIGQUIT
# Покройте код агента и сервера юнит тестами

      - name: "Code increment #2"
        if: always()
        run: |
          devopstest -test.v -test.run=^TestIteration2[b]*$ \
            -source-path=. \
            -binary-path=cmd/server/server

